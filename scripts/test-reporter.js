import fs from 'fs';
import path from 'path';

/**
 * Custom Vitest reporter that generates TEST_RESULTS.md
 */
export default class TestReporter {
  constructor() {
    this.suites = [];
    this.totalTests = 0;
    this.passedTests = 0;
    this.failedTests = 0;
  }

  onInit() {
    console.log('Initializing test reporter...');
  }

  onCollected() {
    // Files collected
  }

  onFinished(files, errors) {
    if (errors && errors.length > 0) {
      console.error('Test execution had errors:', errors);
    }

    // Process all test files
    this.processFiles(files);

    // Generate the report
    this.generateReport();
  }

  processFiles(files) {
    files.forEach((file) => {
      if (file.tasks) {
        this.processTasksRecursive(file.tasks, file.name);
      }
    });
  }

  processTasksRecursive(tasks, fileName) {
    tasks.forEach((task) => {
      if (task.type === 'suite') {
        // Process nested suites
        if (task.tasks) {
          this.processTasksRecursive(task.tasks, fileName);
        }
      } else if (task.type === 'test') {
        this.totalTests++;

        if (task.result?.state === 'pass') {
          this.passedTests++;
        } else if (task.result?.state === 'fail') {
          this.failedTests++;
        }

        // Store test info for detailed reporting
        this.suites.push({
          file: fileName,
          name: task.name,
          state: task.result?.state || 'unknown',
          duration: task.result?.duration || 0,
        });
      }
    });
  }

  generateReport() {
    const successRate = this.totalTests > 0
      ? Math.round((this.passedTests / this.totalTests) * 100)
      : 0;

    const date = new Date().toISOString().split('T')[0];

    let content = `# Test Results - B♭ Trumpet Agility Metronome

## Test Suite Summary

**Total Tests:** ${this.totalTests}
**Passed:** ${this.passedTests} ✅
**Failed:** ${this.failedTests} ❌
**Success Rate:** ${successRate}%

`;

    // Group tests by file/category
    const testsByFile = this.groupTestsByFile();

    if (this.totalTests > 0) {
      content += `## Test Details\n\n`;

      for (const [fileName, tests] of Object.entries(testsByFile)) {
        const category = this.getCategoryFromFile(fileName);
        const passCount = tests.filter(t => t.state === 'pass').length;

        content += `### ${category} (${passCount}/${tests.length} passed)\n\n`;
        content += `**File:** \`${fileName}\`\n\n`;

        tests.forEach(test => {
          const icon = test.state === 'pass' ? '✅' : '❌';
          const duration = test.duration ? ` (${test.duration}ms)` : '';
          content += `- ${icon} ${test.name}${duration}\n`;
        });

        content += '\n';
      }
    }

    content += `## Test Execution

\`\`\`bash
npm test              # Run tests once
npm test -- --run     # Run tests in CI mode
npm test:ui           # Run with UI
npm test:coverage     # Run with coverage report
\`\`\`

## Test Framework

- **Testing Library**: Vitest 3.2.4
- **Environment**: jsdom (for DOM testing)
- **Assertions**: Vitest built-in matchers
- **Coverage**: V8 provider

---

*Generated: ${date}*
*Auto-generated by test reporter*
`;

    // Write the report
    const reportPath = path.resolve(process.cwd(), 'TEST_RESULTS.md');
    fs.writeFileSync(reportPath, content, 'utf8');
    console.log(`\n✅ Test report generated: ${reportPath}`);
  }

  groupTestsByFile() {
    const grouped = {};

    this.suites.forEach((test) => {
      const fileName = this.extractFileName(test.file);
      if (!grouped[fileName]) {
        grouped[fileName] = [];
      }
      grouped[fileName].push(test);
    });

    return grouped;
  }

  extractFileName(filePath) {
    // Extract the meaningful part of the path
    const match = filePath.match(/src\/(.+?)\.test\.js/);
    return match ? match[1] : path.basename(filePath);
  }

  getCategoryFromFile(fileName) {
    if (fileName.includes('constants/')) {
      return 'Constants Tests';
    } else if (fileName.includes('hooks/')) {
      return 'Hooks Tests';
    } else if (fileName.includes('services/')) {
      return 'Services Tests';
    } else if (fileName.includes('utils/')) {
      return 'Utils Tests';
    } else if (fileName.includes('components/')) {
      return 'Components Tests';
    }
    return 'Other Tests';
  }
}
